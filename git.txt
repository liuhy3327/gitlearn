#本地git
git init #命令把这个目录变成Git可以管理的仓库，目录下会多一个.git的目录，这个目录默认是隐藏的，用ls -ah命令就可以看见
git status #查看状态
git diff    #是工作区(work dict)和暂存区(stage)的比较
git diff --cached    #是暂存区(stage)和分支(master)的比较
git log [--pretty=oneline]  #查看提交历史
git reflog   #查看head的变更历史
git reset --hard commit_id  #变更到哪个head  也可以是上N个版本(一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100)
git checkout -- filename #撤销工作区的修改
git reset HEAD file#暂存区的修改撤销掉（unstage），重新放回工作区
git rm #删除文件

git add  #工作区到暂存区(stage)
git commit -m "comment"  #暂存区(stage) 到分支

还原场景
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。
场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。
场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。git reset --hard commit_id 


#远程git：
##添加远程库  本地--》远程
要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；
关联后，使用命令git push -u origin master第一次推送master分支的所有内容；
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；
##从远程库克隆 远程--》本地
git clone ssh链接

git checkout -b dev #-b参数表示创建并切换 所以这里是创建dev分支，然后切换到dev分支
git branch #查看当前分支 
git branch dev #创建分支
git checkout dev #切换分支
git merge dev #将dev合并到当前分支 fast forward
git branch -d dev #删除分支dev
git log --graph --pretty=oneline --abbrev-commit #命令可以看到分支合并图
git merge --no-ff -m "merge with no-ff" dev #加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并


